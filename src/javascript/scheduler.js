// Generated by CoffeeScript 1.10.0
(function() {
  var Scheduler, Section, Session;

  Session = (function() {
    function Session(dow1, strStartTime, strEndTime) {
      this.dow = dow1;
      this.startTime = util.parseTime(strStartTime);
      this.endTime = util.parseTime(strEndTime);
    }

    Session.prototype.overlap = function(otherSession) {
      return (otherSession.startTime < this.endTime && otherSession.endTime > this.startTime) || (this.startTime < otherSession.endTime && this.endTime > otherSession.startTime);
    };

    return Session;

  })();

  Section = (function() {
    function Section(courseName, courseNumber, sectionNum, jsonSessions) {
      var dow, i, j, jsonSession, len, len1, ref;
      this.courseName = courseName;
      this.courseNumber = courseNumber;
      this.sectionNum = sectionNum;
      this.sessions = [];
      for (i = 0, len = jsonSessions.length; i < len; i++) {
        jsonSession = jsonSessions[i];
        ref = jsonSession.dows;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          dow = ref[j];
          this.sessions.push(new Session(dow, jsonSession.startTime, jsonSession.endTime));
        }
      }
    }

    Section.prototype.overlap = function(otherSection) {
      var i, len, mySession, overlap, ref, results, theirSession;
      overlap = false;
      ref = this.sessions;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        mySession = ref[i];
        results.push((function() {
          var j, len1, ref1, results1;
          ref1 = otherSection.sessions;
          results1 = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            theirSession = ref1[j];
            results1.push(overlap = overlap || mySession.overlap(theirSession));
          }
          return results1;
        })());
      }
      return results;
    };

    return Section;

  })();

  Scheduler = (function() {
    function Scheduler(jsonCourses) {
      var course, i, j, len, len1, objCourses, ref, sec;
      this.sections = [];
      objCourses = JSON.parse(jsonCourses);
      for (i = 0, len = objCourses.length; i < len; i++) {
        course = objCourses[i];
        ref = course.sections;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          sec = ref[j];
          this.sections.push(new Section(course.name, course.number, sec.number, sec.sessions));
        }
      }
    }

    Scheduler.prototype.combine = function() {
      var chosen, schedules;
      chosen = [];
      schedules = [];
      recursiveCombine(this.courses, chosen, this.schedules);
      return schedules;
    };

    Scheduler.prototype.recursiveCombine = function(courses, chosen, schedules) {
      var course, i, len, next, results, section;
      if (chosen.length === courses.length) {
        schedules.push(chosen);
      }
      next = chosen.length;
      course = chosen[next];
      results = [];
      for (i = 0, len = course.length; i < len; i++) {
        section = course[i];
        if (!overlap([section], chosen)) {
          chosen.push(section);
          recursiveCombine(courses, chosen, schedules);
          results.push(chosen.pop);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Scheduler.prototype.overlap = function(sectionsArrOne, sectionsArrTwo) {
      var i, j, len, len1, secA, secB;
      for (i = 0, len = sectionsArrOne.length; i < len; i++) {
        secA = sectionsArrOne[i];
        for (j = 0, len1 = sectionsArrTwo.length; j < len1; j++) {
          secB = sectionsArrTwo[j];
          if (secA.overlap(secB)) {
            return true;
          }
        }
      }
      return false;
    };

    return Scheduler;

  })();

}).call(this);

//# sourceMappingURL=scheduler.js.map
