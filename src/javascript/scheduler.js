// Generated by CoffeeScript 1.10.0
(function() {
  var Scheduler, Section, Session, test;

  Session = (function() {
    function Session(dow1, strStartTime, strEndTime) {
      this.dow = dow1;
      this.startTime = util.parseTime(strStartTime);
      this.endTime = util.parseTime(strEndTime);
    }

    Session.prototype.overlap = function(otherSession) {
      var onSameDay, thatEndsAfterThisStarts, thatOverlapsThis, thatStartsB4ThisEnds, thisEndsAfterThatStarts, thisOverlapsThat, thisStartsB4ThatEnds;
      onSameDay = this.dow === otherSession.dow;
      if (!onSameDay) {
        return false;
      }
      thatStartsB4ThisEnds = otherSession.startTime < this.endTime;
      thatEndsAfterThisStarts = otherSession.endTime > this.startTime;
      thisOverlapsThat = thatStartsB4ThisEnds && thatEndsAfterThisStarts;
      thisStartsB4ThatEnds = this.startTime < otherSession.endTime;
      thisEndsAfterThatStarts = this.endTime > otherSession.startTime;
      thatOverlapsThis = thisStartsB4ThatEnds && thisEndsAfterThatStarts;
      return thisOverlapsThat || thatOverlapsThis;
    };

    return Session;

  })();

  Section = (function() {
    function Section(courseName, courseNumber, sectionNum, jsonSessions) {
      var dow, j, jsonSession, k, len, len1, ref;
      this.courseName = courseName;
      this.courseNumber = courseNumber;
      this.sectionNum = sectionNum;
      this.sessions = [];
      for (j = 0, len = jsonSessions.length; j < len; j++) {
        jsonSession = jsonSessions[j];
        ref = jsonSession.dows;
        for (k = 0, len1 = ref.length; k < len1; k++) {
          dow = ref[k];
          this.sessions.push(new Session(dow, jsonSession.startTime, jsonSession.endTime));
        }
      }
    }

    Section.prototype.overlap = function(otherSection) {
      var j, len, mySession, overlap, ref, results, theirSession;
      overlap = false;
      ref = this.sessions;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        mySession = ref[j];
        results.push((function() {
          var k, len1, ref1, results1;
          ref1 = otherSection.sessions;
          results1 = [];
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            theirSession = ref1[k];
            results1.push(overlap = overlap || mySession.overlap(theirSession));
          }
          return results1;
        })());
      }
      return results;
    };

    return Section;

  })();

  Scheduler = (function() {
    function Scheduler(objCourses) {
      this.parseObj(objCourses);
    }

    Scheduler.prototype.parseObj = function(jsonCourses) {
      var c, course, j, k, len, len1, ref, results, sec;
      this.courses = [];
      results = [];
      for (j = 0, len = jsonCourses.length; j < len; j++) {
        c = jsonCourses[j];
        course = {
          name: c.name,
          number: c.number,
          sections: []
        };
        ref = c.sections;
        for (k = 0, len1 = ref.length; k < len1; k++) {
          sec = ref[k];
          course.sections.push(new Section(c.name, c.number, sec.number, sec.sessions));
        }
        results.push(this.courses.push(course));
      }
      return results;
    };

    Scheduler.prototype.combine = function() {
      var schedules;
      schedules = [];
      this.recursiveCombine(this.courses, [], schedules, 0);
      return schedules;
    };

    Scheduler.prototype.recursiveCombine = function(courses, chosenSections, schedules, level) {
      var course, i, j, k, len, next, ref, results, section, tabs;
      tabs = '';
      for (i = j = 0, ref = level; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        tabs += '\t';
      }
      console.log(tabs + "courses:  " + JSON.stringify(courses));
      console.log(tabs + "chosenSections:  " + JSON.stringify(chosenSections));
      console.log(tabs + "schedules:  " + JSON.stringify(schedules));
      console.log('=====================================');
      if (chosenSections.length === Object.size(courses)) {
        schedules.push(chosenSections);
        return;
      }
      next = chosenSections.length;
      course = courses[next];
      results = [];
      for (k = 0, len = course.length; k < len; k++) {
        section = course[k];
        if (!this.overlap(section, chosenSections)) {
          chosenSections.push(section);
          this.recursiveCombine(courses, chosenSections, schedules, level + 1);
          results.push(chosenSections.pop);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Scheduler.prototype.overlap = function(secA, sectionsArr) {
      var j, len, secB;
      for (j = 0, len = sectionsArr.length; j < len; j++) {
        secB = sectionsArr[j];
        if (secA.overlap(secB)) {
          return true;
        }
      }
      return false;
    };

    Scheduler.prototype.makeSchedules = function() {
      var tableMaker;
      this.schedules = this.combine();
      tableMaker = new TableMaker(this.schedules);
      return tableMaker.makeHtml();
    };

    return Scheduler;

  })();

  window.Scheduler = Scheduler;

  test = {
    Section: Section,
    Session: Session
  };

  window.test = test;

}).call(this);

//# sourceMappingURL=scheduler.js.map
