// Generated by CoffeeScript 1.10.0
(function() {
  var TableMaker;

  TableMaker = (function() {
    function TableMaker(sectionDoubleArr) {
      this.schedules = sectionDoubleArr;
    }

    TableMaker.prototype.makeHtml = function(schedule) {
      var classDivs, i, len, ref, sectionArr, tableHtml, tables;
      tables = [];
      ref = this.schedules;
      for (i = 0, len = ref.length; i < len; i++) {
        sectionArr = ref[i];
        tableHtml = this.makeBasicTableHtml(sectionArr);
        classDivs = this.makeClassDivs(sectionArr);
        tables.push('<div class="schedule"><div class="schedule-table">' + tableHtml + classDivs + '</div></div>');
      }
      return tables;
    };

    TableMaker.prototype.makeBasicTableHtml = function(sectionArr) {
      var hour, i, len, ref, rowTempl, tableHtml, tableRows, thead;
      thead = '<thead><tr><th class="time">Time</th><th>Monday</th><th>Tuesday</th>' + '<th>Wednesday</th><th>Thursday</th><th>Friday</th></tr></thead>';
      rowTempl = $.templates("<tr><th>{{:time}}</th><td></td><td></td><td></td><td></td><td></td></tr>");
      tableRows = '';
      ref = this.getTimeRange(sectionArr);
      for (i = 0, len = ref.length; i < len; i++) {
        hour = ref[i];
        tableRows += rowTempl.render({
          time: util.formatHour(hour)
        });
      }
      tableHtml = "<table>" + thead + "<tbody>" + tableRows + "</tbody></table>";
      return tableHtml;
    };

    TableMaker.prototype.getTimeRange = function(sectionArr) {
      var first, i, j, k, last, len, len1, ref, ref1, ref2, results, secFirst, secLast, section, session;
      first = null;
      last = null;
      for (i = 0, len = sectionArr.length; i < len; i++) {
        section = sectionArr[i];
        secFirst = null;
        secLast = null;
        ref = section.sessions;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          session = ref[j];
          if ((secFirst === null) || (session.startTime < secFirst)) {
            secFirst = session.startTime;
          }
          if ((secLast === null) || (session.endTime > secLast)) {
            secLast = session.endTime;
          }
        }
        if ((first === null) || (secFirst < first)) {
          first = secFirst;
        }
        if ((last === null) || (secLast > last)) {
          last = secLast;
        }
      }
      if (first === null || last === null) {
        return [0];
      }
      if (last.getMinutes() > 0) {
        last.setHours(last.getHours() + 1);
      }
      first.setHours(first.getHours() - 1);
      last.setHours(last.getHours() + 1);
      return (function() {
        results = [];
        for (var k = ref1 = first.getHours(), ref2 = last.getHours(); ref1 <= ref2 ? k <= ref2 : k >= ref2; ref1 <= ref2 ? k++ : k--){ results.push(k); }
        return results;
      }).apply(this);
    };

    TableMaker.prototype.makeClassDivs = function(sectionArr) {
      return '';
    };

    return TableMaker;

  })();

  window.TableMaker = TableMaker;

}).call(this);

//# sourceMappingURL=tableMaker.js.map
