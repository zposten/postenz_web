// Generated by CoffeeScript 1.10.0
(function() {
  var SchedulerInput;

  SchedulerInput = (function() {
    function SchedulerInput() {
      this.addSessionListener();
      this.addSectionListener();
      this.addCourseListener();
      this.addMakeSchedulesListener();
    }

    SchedulerInput.init = function() {
      return new SchedulerInput();
    };

    SchedulerInput.prototype.addSessionListener = function() {
      this.createAddClickListener('.schd-add-time', '.schd-session', 'time');
      return this.createRemoveClickListener('.schd-rmv-time', '.schd-section', '.schd-section-time');
    };

    SchedulerInput.prototype.addSectionListener = function() {
      this.createAddClickListener('.schd-add-section', '.schd-section', 'section');
      return this.createRemoveClickListener('.schd-rmv-section', '.schd-course', '.schd-section');
    };

    SchedulerInput.prototype.addCourseListener = function() {
      this.createAddClickListener('.schd-add-course', '.schd-course', 'course');
      this.createRemoveClickListener('.schd-rmv-course', '#schd-courses', '.schd-course');
      return $('[id^=course1-section1-time1-]').pickatime({
        darktheme: true,
        autoclose: true
      });
    };

    SchedulerInput.prototype.createAddClickListener = function(btnSelector, cloneSelector, inputID) {
      return $('#schd-courses').on('click', btnSelector, (function(_this) {
        return function(event) {
          var attr, group, groups, i, input, inputs, j, k, len, len1, len2, matches, num, picker, regex, target, theClone, timepickers, toClone;
          target = $(event.currentTarget);
          toClone = target.closest(cloneSelector);
          theClone = toClone.clone();
          timepickers = theClone.find('.input-field > input.timepicker');
          for (i = 0, len = timepickers.length; i < len; i++) {
            picker = timepickers[i];
            $(picker).pickatime({
              darktheme: true,
              autoclose: true
            });
          }
          groups = [
            {
              tag: 'input',
              attr: 'id'
            }, {
              tag: 'label',
              attr: 'for'
            }
          ];
          for (j = 0, len1 = groups.length; j < len1; j++) {
            group = groups[j];
            inputs = theClone.find(group.tag + '[' + group.attr + '*=' + inputID + ']');
            for (k = 0, len2 = inputs.length; k < len2; k++) {
              input = inputs[k];
              attr = $(input).attr(group.attr);
              regex = new RegExp(inputID + '(\\d)');
              matches = regex.exec(attr);
              if (!matches) {
                continue;
              }
              num = Number(matches[1]) + 1;
              attr = attr.replace(regex, inputID + num);
              $(input).attr(group.attr, attr);
            }
          }
          _this.resetCourseHtml(theClone);
          return theClone.insertAfter(toClone);
        };
      })(this));
    };

    SchedulerInput.prototype.createRemoveClickListener = function(btnSelector, specificitySelector, rmvSelector) {
      return $('#schd-courses').on('click', btnSelector, (function(_this) {
        return function(event) {
          var courseElements, target;
          target = $(event.currentTarget);
          courseElements = target.closest(specificitySelector).find(rmvSelector);
          if (courseElements.length > 1) {
            return target.closest(rmvSelector).remove();
          }
        };
      })(this));
    };

    SchedulerInput.prototype.resetCourseHtml = function(course) {
      course.find('input:text').val('');
      course.find('input-field > label').removeClass('active');
      course.find('input:checkbox').prop('checked', false);
      course.find('.schd-section').not(':first').remove();
      return course.find('.schd-section-time').not(':first').remove();
    };

    SchedulerInput.prototype.addMakeSchedulesListener = function() {
      var noSchedules;
      noSchedules = 'No schedules could be generated for that input';
      return $('#make-schedules').on('click', (function(_this) {
        return function(event) {
          var err, error, html, json, jsonObj, scheduler;
          try {
            json = _this.makeJson();
            console.log('MADE JSON:  ' + json);
            jsonObj = JSON.parse(json);
            scheduler = new window.Scheduler(jsonObj);
            html = scheduler.makeSchedules();
            return $('div#schedule-wrapper').html(html || noSchedules);
          } catch (error) {
            err = error;
            return $('div#schedule-wrapper').html(err);
          }
        };
      })(this));
    };

    SchedulerInput.prototype.makeJson = function() {
      var course, courses, i, json, len;
      json = '';
      courses = $('#schd-courses').children('.schd-course');
      for (i = 0, len = courses.length; i < len; i++) {
        course = courses[i];
        json += this.makeCourseJson($(course));
        json += ',';
      }
      json = util.removeLastChar(json);
      if (!json) {
        return '';
      }
      return '[' + json + ']';
    };

    SchedulerInput.prototype.makeCourseJson = function(course) {
      var err, error, i, json, len, name, number, section, sections;
      name = this.getValFirstChild(course, 'input.course-name').trim();
      number = name;
      if (!name || !number) {
        throw new Error("Invalid course name ({0}) or number ({1})".format(name, number));
      }
      json = '{"name": "{0}", "number": "{1}", "sections": ['.format(name, number);
      sections = course.find('.schd-section');
      if (sections.length === 0) {
        throw new Error("No sections found for course: {0}/{1}".format(name, number));
      }
      for (i = 0, len = sections.length; i < len; i++) {
        section = sections[i];
        try {
          json += this.makeSectionJson($(section));
          json += ',';
        } catch (error) {
          err = error;
          throw new Error(err.message + " for course {0}/{1}".format(name, number));
        }
      }
      json = util.removeLastChar(json);
      json += ']}';
      return json;
    };

    SchedulerInput.prototype.makeSectionJson = function(section) {
      var i, json, len, number, session, sessions;
      number = this.getValFirstChild(section, 'input.sec-num');
      json = '{"number": "{0}", "sessions": ['.format(number);
      sessions = section.find('.schd-session');
      if (!number) {
        throw new Error("Invalid section number ({0})".format(number));
      }
      if (sessions.length === 0) {
        throw new Error("No sessions found for section: {0}".format(number));
      }
      for (i = 0, len = sessions.length; i < len; i++) {
        session = sessions[i];
        json += this.makeSessionJson($(session));
        json += ',';
      }
      json = util.removeLastChar(json);
      json += ']}';
      return json;
    };

    SchedulerInput.prototype.makeSessionJson = function(session) {
      var checkedDay, checkedDays, day, dow, endTime, i, id, json, len, startTime;
      checkedDays = session.find('input.schd-session-dow:checked');
      if (checkedDays.length === 0) {
        return '';
      }
      json = '{"dows": [';
      for (i = 0, len = checkedDays.length; i < len; i++) {
        checkedDay = checkedDays[i];
        id = $(checkedDay).attr('id');
        day = $("label[for='" + id + "']").text();
        dow = ['S', 'M', 'T', 'W', 'R', 'F', 'Sa'].indexOf(day.trim());
        if (dow > 0) {
          json += dow + ',';
        }
      }
      json = util.removeLastChar(json);
      json += '],';
      startTime = this.getValFirstChild(session, '.start-time > input');
      endTime = this.getValFirstChild(session, '.end-time > input');
      json += '"startTime": "{0}","endTime": "{1}"}'.format(startTime, endTime);
      return json;
    };

    SchedulerInput.prototype.getValFirstChild = function(jqueryObj, selector) {
      var children, firstChild, val;
      children = jqueryObj.find(selector);
      firstChild = children[0];
      val = $(firstChild).val();
      return val || '';
    };

    return SchedulerInput;

  })();

  window.SchedulerInput = SchedulerInput;

}).call(this);

//# sourceMappingURL=schedulerInput.js.map
