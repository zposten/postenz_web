// Generated by CoffeeScript 1.10.0
(function() {
  var SchedulerInput;

  SchedulerInput = (function() {
    function SchedulerInput() {
      this.addTimeListener();
      this.addSectionListener();
      this.addCourseListener();
      this.addMakeSchedulesListener();
    }

    SchedulerInput.init = function() {
      return new SchedulerInput();
    };

    SchedulerInput.prototype.addTimeListener = function() {
      this.add('.schd-add-time');
      this.remove('.schd-rmv-time');
      this.hourSetAmPm('start');
      return this.hourSetAmPm('end');
    };

    SchedulerInput.prototype.hourSetAmPm = function(startEnd) {
      var ampmSelector, hourSelector;
      hourSelector = '.schd-section-' + startEnd + '-time-hour';
      ampmSelector = '.schd-section-' + startEnd + '-time-period';
      return $(hourSelector).on('change', function(event) {
        var ampm, hour, i, isAm, val;
        val = $(this).val();
        isAm = false;
        for (hour = i = 8; i <= 11; hour = ++i) {
          if (val == hour) {
            isAm = true;
          }
        }
        ampm = $(this).siblings(ampmSelector).last();
        return ampm.val(isAm ? "AM" : "PM");
      });
    };

    SchedulerInput.prototype.addSectionListener = function() {
      this.add('.schd-add-section');
      return this.remove('.schd-rmv-section');
    };

    SchedulerInput.prototype.addCourseListener = function() {
      this.add('.schd-add-course');
      return this.remove('.schd-rmv-course');
    };

    SchedulerInput.prototype.add = function(selector) {
      return $(selector).on('click', (function(_this) {
        return function(event) {
          var clone, target;
          target = $(event.currentTarget);
          clone = target.siblings('div').last().clone(true);
          _this.resetCourseHtml(clone);
          return clone.insertBefore(target);
        };
      })(this));
    };

    SchedulerInput.prototype.remove = function(selector) {
      return $(selector).on('click', (function(_this) {
        return function(event) {
          var siblings;
          siblings = $(event.currentTarget).siblings('div');
          if (siblings.length > 1) {
            return siblings.last().remove();
          }
        };
      })(this));
    };

    SchedulerInput.prototype.resetCourseHtml = function(course) {
      course.find('.float-input').val('');
      course.find('select').attr('selectedIndex', 0);
      course.find('input:checkbox').prop('checked', false);
      course.find('.schd-section').not(':first').remove();
      return course.find('[select-time]').not(':first').remove();
    };

    SchedulerInput.prototype.addMakeSchedulesListener = function() {
      var badJson, noSchedules;
      noSchedules = 'No schedules could be generated';
      badJson = 'Invalid JSON string supplied';
      return $('#make-schedules').on('click', (function(_this) {
        return function(event) {
          var err, error, html, json, jsonObj, scheduler;
          try {
            json = _this.makeJson();
            console.log('MADE JSON:  ' + json);
            jsonObj = JSON.parse(json);
            scheduler = new window.Scheduler(jsonObj);
            html = scheduler.makeSchedules();
            return $('div#schedule-wrapper').html(html || noSchedules);
          } catch (error) {
            err = error;
            return $('div#schedule-wrapper').html(badJson);
          }
        };
      })(this));
    };

    SchedulerInput.prototype.makeJson = function() {
      var course, courses, i, json, len;
      json = '';
      courses = $('#schd-courses').children('.schd-course');
      for (i = 0, len = courses.length; i < len; i++) {
        course = courses[i];
        json += this.makeCourseJson($(course));
        json += ',';
      }
      json = util.removeLastChar(json);
      if (!json) {
        return '';
      }
      return '[' + json + ']';
    };

    SchedulerInput.prototype.makeCourseJson = function(course) {
      var err, error, i, json, len, name, number, section, sections;
      name = this.getValFirstChild(course, 'input.course-name').trim();
      number = name;
      if (!name || !number) {
        throw new Error("Invalid course name ({0}) or number ({1})".format(name, number));
      }
      json = '{"name": "{0}", "number": "{1}", "sections": ['.format(name, number);
      sections = course.find('.schd-section');
      if (sections.length === 0) {
        throw new Error("No sections found for course: {0}/{1}".format(name, number));
      }
      for (i = 0, len = sections.length; i < len; i++) {
        section = sections[i];
        try {
          json += this.makeSectionJson($(section));
          json += ',';
        } catch (error) {
          err = error;
          throw new Error(err.message + " for course {0}/{1}".format(name, number));
        }
      }
      json = util.removeLastChar(json);
      json += ']}';
      return json;
    };

    SchedulerInput.prototype.makeSectionJson = function(section) {
      var i, json, len, number, session, sessions;
      number = this.getValFirstChild(section, 'input.sec-num');
      json = '{"number": "{0}", "sessions": ['.format(number);
      sessions = section.find('.schd-section-time');
      if (!number) {
        throw new Error("Invalid section number ({0})".format(number));
      }
      if (sessions.length === 0) {
        throw new Error("No sessions found for section: {0}".format(number));
      }
      for (i = 0, len = sessions.length; i < len; i++) {
        session = sessions[i];
        json += this.makeSessionJson($(session));
        json += ',';
      }
      json = util.removeLastChar(json);
      json += ']}';
      return json;
    };

    SchedulerInput.prototype.makeSessionJson = function(session) {
      var checkedDay, checkedDays, day, dow, endHour, endMin, endPeriod, i, json, len, startHour, startMin, startPeriod, str;
      checkedDays = session.find('input.schd-section-time-dow:checked');
      if (checkedDays.length === 0) {
        return '';
      }
      json = '{"dows": [';
      for (i = 0, len = checkedDays.length; i < len; i++) {
        checkedDay = checkedDays[i];
        day = $(checkedDay).val();
        dow = ['S', 'M', 'T', 'W', 'R', 'F', 'Sa'].indexOf(day.trim());
        if (dow > 0) {
          json += dow + ',';
        }
      }
      json = util.removeLastChar(json);
      json += '],';
      startHour = this.getValFirstChild(session, 'select.schd-section-start-time-hour');
      startMin = this.getValFirstChild(session, 'select.schd-section-start-time-min');
      startPeriod = this.getValFirstChild(session, 'select.schd-section-start-time-period');
      endHour = this.getValFirstChild(session, 'select.schd-section-end-time-hour');
      endMin = this.getValFirstChild(session, 'select.schd-section-end-time-min');
      endPeriod = this.getValFirstChild(session, 'select.schd-section-end-time-period');
      str = '"startTime": "{0}:{1} {2}","endTime": "{3}:{4} {5}"}';
      json += str.format(startHour, startMin, startPeriod, endHour, endMin, endPeriod);
      return json;
    };

    SchedulerInput.prototype.getValFirstChild = function(jqueryObj, selector) {
      var children, firstChild, val;
      children = jqueryObj.find(selector);
      firstChild = children[0];
      val = $(firstChild).val();
      return val || '';
    };

    return SchedulerInput;

  })();

  window.SchedulerInput = SchedulerInput;

}).call(this);

//# sourceMappingURL=schedulerInput.js.map
